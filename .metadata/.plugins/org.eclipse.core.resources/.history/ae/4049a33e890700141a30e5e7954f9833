package edu.tamu.srl.music.classifier;

import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import edu.tamu.srl.music.classifier.IShape.ShapeName;

public class BarShapeClassifier extends AbstractShapeClassifier implements IShapeClassifier {

	@Override
	public boolean classify(List<IShape> originals) {
		
		// clone the list of original shapes
		List<IShape> shapes = new ArrayList<IShape>();
		for (IShape original : originals)
			shapes.add(original);
		
		// extract all raw shapes
		List<IShape> rawShapes = new ArrayList<IShape>();
		Iterator<IShape> iterator = shapes.iterator();
		while (iterator.hasNext()) {
			IShape shape = iterator.next();
			if (shape.getShapeName() == ShapeName.RAW) {
				rawShapes.add(shape);
				iterator.remove();
			}
		}
		
		// get the staff as reference for setting the shape
		IShape staff = null;
		for (IShape s : shapes) {
			if (s.getShapeName() == IShape.ShapeName.WHOLE_STAFF) {
				staff = s;
				break;
			}
		}
		StaffShape staffShape = (StaffShape)staff;
		
		
		
		// 
		boolean isBarLine = isBarLine(rawShapes, staffShape);
		
		
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public List<IShape> getResult() {
		
		return myShapes;
	}

	private boolean isBarLine(List<IShape> rawShapes, StaffShape staffShape) {
		
		// singleton raw shape test
		if (rawShapes.size() != 0)
			return false;
		
		// 
		
		return false;
	}
}
