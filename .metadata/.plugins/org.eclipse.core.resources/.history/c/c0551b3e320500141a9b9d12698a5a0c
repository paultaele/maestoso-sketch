package edu.tamu.srl.music.classifier;

import java.awt.geom.Point2D;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

import edu.tamu.srl.music.xml.XmlPoint;
import edu.tamu.srl.music.xml.XmlSketch;
import edu.tamu.srl.music.xml.XmlSketchParser;
import edu.tamu.srl.music.xml.XmlStroke;

public abstract class AbstractShapeClassifier implements IShapeClassifier {

	public abstract boolean classify(List<IShape> originals);

	public abstract List<IShape> getResult();
	
//	protected List<Template> getTemplates(String pathname) {
//		
//		// get all XML test data files
//		File dataDir = new File(pathname);
//		File[] files = dataDir.listFiles();
//		List<File> dataFiles = new ArrayList<File>();
//		for (File file : files) {
//			
//			if (file.getName().endsWith(".xml")) {
//				dataFiles.add(file);
//			}
//		}
//
//		// convert XML test data files to XmlSketch objects
//		XmlSketchParser parser;
//		List<XmlSketch> sketches = new ArrayList<XmlSketch>();
//		for (File dataFile : dataFiles) {
//			
//			parser = new XmlSketchParser(dataFile.getAbsolutePath());
//			sketches.add(parser.getSketch());
//		}
//		
//		// convert XmlSketch objects to Template objects
//		List<Template> templates = new ArrayList<Template>();
//		for (XmlSketch sketch : sketches) {
//			
//			Template template = convertToTemplate(sketch);
//			templates.add(template);
//		}
//		
//		return templates;
//	}

	private Template convertToTemplate(XmlSketch sketch) {
		
		// get the XML strokes and shape ID from the XML sketch
		List<XmlStroke> xmlStrokes = sketch.getStrokes();
		String shape = sketch.getShape();
		
		// initialize the list of points and strokes
		List<Point2D.Double> points = new ArrayList<Point2D.Double>();
		List<List<Point2D.Double>> strokes = new ArrayList<List<Point2D.Double>>();
		
		// iterate through each stroke
		for (XmlStroke xmlStroke : xmlStrokes) {
			
			// iterate through each point
			for (XmlPoint xmlPoint : xmlStroke.toPoints()) {
				
				// get the current point
				double x = xmlPoint.X();
				double y = xmlPoint.Y();
				Point2D.Double point = new Point2D.Double(x, y);
				
				points.add(point);
			}
			
			// add the points to the list of strokes and then reset the points
			strokes.add(points);
			points = new ArrayList<Point2D.Double>();
		}
		
		return new Template(shape, strokes);
	}
	
	protected List<List<Point2D.Double>> getStrokes(List<IShape> shapes) {
		
		List<List<Point2D.Double>> strokes = new ArrayList<List<Point2D.Double>>();
		
		for (IShape shape : shapes) {
			
			strokes.add(shape.getStrokes().get(0).getPoints());
		}
		
		return strokes;
	}
	
	protected boolean isLine(List<IShape> shapes) {
		
		// case: the list of raw strokes is either 0 or 2+
		// a line is only a single stroke
		if (shapes.size() != 1)
			return false;
		
		// get the singleton shape's single stroke's list of points
		List<Point2D.Double> points = shapes.get(0).getStrokes().get(0).getPoints();
		
		// check if staff line is a line
		Point2D.Double pointStart = points.get(0);
		Point2D.Double pointEnd = points.get(points.size()-1);
		double distance = distance(pointStart, pointEnd);
		double pathDistance = pathDistance(points);
		double lineRatio = distance / pathDistance;
		
		// check for linearity
		if (lineRatio < 0.95 || lineRatio > 1.05)
			return false;
		
		return true;
	}
	
	protected double distance(Point2D.Double p1, Point2D.Double p2) {
		
		return Math.sqrt( (p2.x-p1.x)*(p2.x-p1.x) + (p2.y-p1.y)*(p2.y-p1.y) );
	}

	protected double pathDistance(List<Point2D.Double> points) {
		
		double distance = 0.0;
		
		for (int i = 1; i < points.size() - 1; ++i) {
			
			distance += distance(points.get(i-1), points.get(i));
		}
		
		return distance;
	}
	
	protected List<IShape> myShapes;
	
	protected boolean ENABLE_OUTPUT = true;
}
