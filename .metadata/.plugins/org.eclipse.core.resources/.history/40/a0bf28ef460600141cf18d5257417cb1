package edu.tamu.srl.music.classifier;

import java.awt.Color;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import edu.tamu.srl.music.classifier.IShape.ShapeName;

public class BeatShapeClassifier extends AbstractShapeClassifier implements IShapeClassifier {

	public boolean classify(List<IShape> originals) {
		
		// clone the list of original shapes
		List<IShape> shapes = new ArrayList<IShape>();
		for (IShape original : originals)
			shapes.add(original);
		
		// extract all raw shapes
		List<IShape> rawShapes = new ArrayList<IShape>();
		Iterator<IShape> iterator = shapes.iterator();
		while (iterator.hasNext()) {
			
			IShape shape = iterator.next();
			if (shape.getShapeName() == ShapeName.RAW) {
				
				rawShapes.add(shape);
				iterator.remove();
			}
		}
		
//		// line test
//		if (isLine(rawShapes))
//			return false;
		
		// create and run the classifier
		Hausdorff classifier = new Hausdorff();
		List<List<Point2D.Double>> strokes = getStrokes(rawShapes);
		List<Template> templates = Template.getTemplates(DATA_DIR_NAME);
		Pair result = classifier.classify(strokes, templates);

		// TODO
		if (ENABLE_OUTPUT) {
			System.out.println("### TESTING BEAT ###"); // TODO
			System.out.println("SCORE: " + result.score());
		}
			
		// case: the result's score exceeds the minimum threshold
		// therefore, the stroke(s) have high enough confidence to be that shape
		if (result.score() > MIN_SCORE_THRESHOLD) {
			
			// set the IShape object
			ShapeName newShapeName = getShapeType(result.shape());
			List<IStroke> newStrokes = new ArrayList<IStroke>();
			for (IShape rawShape : rawShapes) {
				
				IStroke newStroke = rawShape.getStrokes().get(0);
//				newStroke.setColor(Color.red); // TEMP
				newStrokes.add(newStroke);
			}
			IShape newShape = new IShape(newShapeName, newStrokes);
			
			// check if the shape falls in any special case
			// if the shape is a special case, then it's not that shape
			boolean isSpecialCase = isSpecialCase(newShape);
			if (isSpecialCase)
				return false;
			else
				newShape.setColor(Color.red); // TEMP
			
			
			newShape.setImageFile(IShape.getImage(newShapeName.name()));
			IShape staffShape = null;
			for (IShape shape : shapes) {
				if (shape.getShapeName() == IShape.ShapeName.WHOLE_STAFF) {
					staffShape = shape;
					break;
				}
			}
			setLocation(newShape, (StaffShape)staffShape, shapes);
			
			//
			shapes.add(newShape);
			myShapes = shapes;
			return true;
		}
		
		return false;
	}
	
	private boolean isSpecialCase(IShape shape) {
		
		// line test
		
		// 9 test
		if (shape.getShapeName() == ShapeName.NINE) {
			
			if (shape.getStrokes().size() != 2)
				return true;
		}
		
		return false;
	}

	public List<IShape> getResult() {
		
		return myShapes;
	}
	
	private ShapeName getShapeType(String shapeName) {
		
		if (shapeName.equals("2"))
			return ShapeName.TWO;
		if (shapeName.equals("3"))
			return ShapeName.THREE;
		if (shapeName.equals("4"))
			return ShapeName.FOUR;
		if (shapeName.equals("5"))
			return ShapeName.FIVE;
		if (shapeName.equals("6"))
			return ShapeName.SIX;
		if (shapeName.equals("7"))
			return ShapeName.SEVEN;
		if (shapeName.equals("8"))
			return ShapeName.EIGHT;
		if (shapeName.equals("9"))
			return ShapeName.NINE;
		
		return ShapeName.RAW;
	}
	
	private void setLocation(IShape shape, StaffShape staff, List<IShape> shapes) {
		
		// check if 
		boolean hasBeat = false;
		IShape other = null;
		for (IShape s : shapes) {
			
			if (s.getShapeGroup() == IShape.ShapeGroup.BEAT) {
				
				hasBeat = true;
				other = s;
			}
		}
		
		//
		System.out.println(shape.getShapeName().name());
		BufferedImage bufferedImage = IShape.getImage(shape.getShapeName().name());
		int imageWidth = bufferedImage.getWidth();
		int imageHeight = bufferedImage.getHeight();
		
		if (hasBeat) {
			
			shape.setImageX(other.getImageX());
			shape.setImageY((int)staff.getLineY(2));
		}
		else {
			
			shape.setImageX((int)shape.getBoundingBox().minX());
			shape.setImageY((int)staff.getLineY(0));
		}
		
		int newImageHeight = (int)(staff.getLineInterval() * 2);
		int newImageWidth = (newImageHeight*imageWidth)/imageHeight;
		
		shape.setImageWidth(newImageWidth);
		shape.setImageHeight(newImageHeight);
	}
	
	public static final String DATA_DIR_NAME = "beat";
	public static final String DATA_DIR_PATHNAME = "src/edu/tamu/srl/music/data/beat/";
	public static final double MIN_SCORE_THRESHOLD = 0.75;
}
