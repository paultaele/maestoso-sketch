package edu.tamu.srl.music.classifier;

import java.awt.Color;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.imageio.ImageIO;

public class IShape {
	
	public IShape(ShapeName shapeName, IStroke stroke) {
		
		myShapeName = shapeName;
		myShapeGroup = myShapeGroup(shapeName);
		myStrokes = new ArrayList<IStroke>();
		myStrokes.add(stroke);
		myOriginalStrokes = new ArrayList<IStroke>();
		myOriginalStrokes.add(stroke);
		myHasImage = false;
		
		myBoundingBox = new BoundingBox(stroke.getPoints());
		myImages = new ArrayList<IImage>();
		myCanDisplayStrokes = true;
	}
	
	public IShape(ShapeName shapeName, List<IStroke> strokes) {
		
		myShapeName = shapeName;
		myShapeGroup = myShapeGroup(shapeName);
		myStrokes = strokes;
		myOriginalStrokes = strokes;
		myHasImage = false;
		
		List<Point2D.Double> points = new ArrayList<Point2D.Double>();
		for (IStroke stroke : strokes)
			for (Point2D.Double point : stroke.getPoints())
				points.add(point);
		myBoundingBox = new BoundingBox(points);
		myImages = new ArrayList<IImage>();
		myCanDisplayStrokes = true;
	}
	
	private ShapeGroup myShapeGroup(ShapeName shapeName) {
		
		if (shapeName == ShapeName.STAFF_LINE
				|| shapeName == ShapeName.STAFF)
			return ShapeGroup.STAFF;
		
		else if (shapeName == ShapeName.TREBLE_CLEF
				|| shapeName == ShapeName.BASS_CLEF)
			return ShapeGroup.CLEF;
		
		else if (shapeName == ShapeName.TWO
				|| shapeName == ShapeName.THREE
				|| shapeName == ShapeName.FOUR
				|| shapeName == ShapeName.FIVE
				|| shapeName == ShapeName.SIX
				|| shapeName == ShapeName.SEVEN
				|| shapeName == ShapeName.EIGHT
				|| shapeName == ShapeName.NINE)
			return ShapeGroup.BEAT;
		
		else if (shapeName == ShapeName.KEY_SHARP
				|| shapeName == ShapeName.KEY_FLAT)
			return ShapeGroup.KEY;
		
//		else if (shapeName == ShapeName.SHARP
//				|| shapeName == ShapeName.FLAT)
//			return ShapeGroup.ACCIDENTAL;
		
		else if (shapeName == ShapeName.SINGLE_BAR
				|| shapeName == ShapeName.DOUBLE_BAR)
			return ShapeGroup.BAR;
		
		else if (shapeName == ShapeName.LOWER_LINE
				|| shapeName == ShapeName.UPPER_LINE)
			return ShapeGroup.LEDGER;
		
		else if (shapeName == ShapeName.LOWER_BRACKET
				|| shapeName == ShapeName.UPPER_BRACKET
				|| shapeName == ShapeName.WHOLE_REST
				|| shapeName == ShapeName.HALF_REST
				|| shapeName == ShapeName.QUARTER_REST
				|| shapeName == ShapeName.EIGHTH_REST)
			return ShapeGroup.REST;
		
		else if (shapeName == ShapeName.NOTE)
			return ShapeGroup.NOTE;
		
		else
			return ShapeGroup.NONE;
	}
	
	public void addImage(IImage image) {
		
		myHasImage = true;
		myImages.add(image);
		myCanDisplayStrokes = false;
	}
	
	public void addStroke(IStroke stroke) {
		
		myStrokes.add(stroke);
	}
	
	public void clearStrokes() {
		
		myStrokes.clear();
	}
	
	public ShapeName getShapeName() {
		
		return myShapeName;
	}
	
	public ShapeGroup getShapeGroup() {
		
		return myShapeGroup;
	}
	
	public List<IStroke> getStrokes() {
		
		return myStrokes;
	}
	
	public List<IImage> getImages() {
		
		return myImages;
	}
	
	public boolean hasImage() {
		
		return myHasImage;
	}
	
	public boolean hasTransformed() {
		
		return myHasTransformed;
	}
	
	public boolean canDisplayStrokes() {
		
		return myCanDisplayStrokes;
	}
	
	public void toggleDisplayStrokes(boolean toggle) {
		
		myCanDisplayStrokes = toggle;
	}
	
	public void setColor(Color color) {
		
		for (IStroke stroke : myStrokes) {
			
			stroke.setColor(color);
		}
	}
	
	public BoundingBox getBoundingBox() {
		
		return myBoundingBox;
	}
	
	public enum ShapeName {
		
		RAW,
		STAFF_LINE, STAFF,
		KEY_SHARP, KEY_FLAT,
		TREBLE_CLEF, BASS_CLEF,
		TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE,
		SINGLE_BAR, DOUBLE_BAR,
		LOWER_LINE, UPPER_LINE,
		LOWER_BRACKET, UPPER_BRACKET, WHOLE_REST, HALF_REST, QUARTER_REST, EIGHTH_REST,
		NOTE
	}
	
	public enum ShapeGroup {
		
		NONE,
		STAFF,
		KEY,
		CLEF,
		BEAT,
		BAR,
		LEDGER,
		REST,
		NOTE
	}
	
	public static void loadImages() {
		
		HashMap<String, BufferedImage> map = new HashMap<String, BufferedImage>();
		File directory = new File(IMAGE_DIR_PATHNAME);
		for (File file : directory.listFiles()) {
			
			if (file.isFile() && file.getName().endsWith(".png")) {
				
				String name = file.getName();
				name = name.substring(0, name.length() - 4);
				BufferedImage bufferedImage = null;
				try {
					bufferedImage = ImageIO.read(file);
				} catch (IOException e) {
					e.printStackTrace();
				}
				
				map.put(name, bufferedImage);
			}
		}
		
		myImagesMap = map;
	}
	
	public static BufferedImage getImage(String shapeName) {
		
		BufferedImage bufferedImage = myImagesMap.get(shapeName);
		
		return bufferedImage;
	}

	
	
	private ShapeName myShapeName;
	private ShapeGroup myShapeGroup;
	protected List<IStroke> myStrokes;
	private List<IStroke> myOriginalStrokes;
	private boolean myHasImage;
	private boolean myHasTransformed;
	private BoundingBox myBoundingBox;
	private List<IImage> myImages;
	private boolean myCanDisplayStrokes;
	
	private static HashMap<String, BufferedImage> myImagesMap;
	public static final String IMAGE_DIR_PATHNAME = "src/edu/tamu/srl/music/images/";
}