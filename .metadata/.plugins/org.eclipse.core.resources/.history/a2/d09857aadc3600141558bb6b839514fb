package edu.tamu.srl.music.gui;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;

import javax.swing.AbstractButton;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;

import edu.tamu.srl.music.classifier.IShape;
import edu.tamu.srl.music.classifier.IShape.ShapeGroup;
import edu.tamu.srl.music.classifier.IShape.ShapeName;
import edu.tamu.srl.music.classifier.KeyShape;
import edu.tamu.srl.music.classifier.NoteShape;
import edu.tamu.srl.music.classifier.RestShape;
import edu.tamu.srl.music.classifier.Template;
import edu.tamu.srl.music.classifier.TimeShapeClassifier;
import edu.tamu.srl.music.xml.lesson.XmlLesson;
import edu.tamu.srl.music.xml.lesson.XmlLessonParser;
import edu.tamu.srl.music.xml.lesson.XmlQuestion;
import edu.tamu.srl.music.xml.music.XmlAnswer;
import edu.tamu.srl.music.xml.music.XmlAnswerParser;
import edu.tamu.srl.music.xml.music.XmlClef;
import edu.tamu.srl.music.xml.music.XmlKey;
import edu.tamu.srl.music.xml.music.XmlComponent;
import edu.tamu.srl.music.xml.music.XmlStaff;
import edu.tamu.srl.music.xml.music.XmlTime;

/**
 * The main GUI for the application.
 * 
 * @author Paul Taele
 *
 */
public class MusicDrawGui implements Runnable {
	
	/**
	 * The main method for running the application.
	 * @param args The console arguments.
	 */
	public static void main(String[] args) {
		
		SwingUtilities.invokeLater(new MaestosoSketchGui());
	}
	
	/**
	 * Runs the methods to create the main frame.
	 */
	public void run() {
    	
        createFrame();
    }
	
	/**
	 * Creates the main frame.
	 */
	private void createFrame() {
		
		// set the dimensions of the main frame relative to a set ratio of
		// the screen's size
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		DEFAULT_FRAME_WIDTH = (int)(screenSize.width * FRAME_RATIO);
		DEFAULT_FRAME_HEIGHT = (int)(screenSize.height * FRAME_RATIO);
		
		// initialize the main frame
        myFrame = new JFrame();
        
        // load templates and images from disk
        Template.loadTemplates();
        IShape.loadImages();
        
        // create the menu bar and add it to the main frame
        createMenuBar();
        myFrame.setJMenuBar(myMenuBar);
        
        // create the main panel and add it to the main frame
        createMainPanel();
		myFrame.add(myMainPanel);
        
		// handle the main frame's actions
		myFrame.setSize(DEFAULT_FRAME_WIDTH, DEFAULT_FRAME_HEIGHT);		// set the size of the frame
		myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);			// enable closing
		myFrame.setVisible(true);										// enable visibility
		myFrame.setLocationRelativeTo(null);							// enable centering of screen
		myFrame.setResizable(true);										// enable resizing
		myFrame.setTitle(APPLICATION_TITLE);							// set application title
        myFrame.addWindowListener(new WindowAdapter() {					// handle post-closing actions
            public void windowClosing(WindowEvent event) {
                exitProcedure();
            }
        });
    }
	
	/**
	 * Handles application after user closes the main frame.
	 */
	public void exitProcedure() {
		
        myFrame.dispose();
        System.exit(0);
    }
	
	private void createMenuBar() {
		
		// create the entire menu bar
		myMenuBar = new JMenuBar();
		
		//
		JMenu fileMenu = createFileMenu();
		myMenuBar.add(fileMenu);
		
		//
		JMenu editMenu = createEditMenu();
		myMenuBar.add(editMenu);
	}
	
	private JMenu createEditMenu() {
		
		// create the menu bar
		JMenu menu = new JMenu("Edit");
		
		//
		myCanDisplayOriginal = false;
		
		//
		JCheckBoxMenuItem displayOriginalItem = new JCheckBoxMenuItem("Display Original");
		displayOriginalItem.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				displayOriginal(e);
			}
		});
		menu.add(displayOriginalItem);
		
		//
		return menu;
	}
	
	private void displayOriginal(ActionEvent e) {
		
		//
		AbstractButton button = (AbstractButton)e.getSource();
		boolean selected = button.getModel().isSelected();
		if (selected)
			myCanDisplayOriginal = true;
		else
			myCanDisplayOriginal = false;
		
		// update the sketch panel
		List<IShape> shapes = mySketchPanel.getShapes();
		shapes.add(null);
		mySketchPanel.undo();
	}
	
	private JMenu createFileMenu() {
		
		// create the menu bar
		JMenu menu = new JMenu("File");
		
		// load practice menu option
		JMenuItem loadPracticeItem = new JMenuItem("Load Practice");
		loadPracticeItem.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				loadPractice();
			}
		});
		menu.add(loadPracticeItem);
		
		// load quiz menu option
		JMenuItem loadQuizItem = new JMenuItem("Load Quiz");
		loadQuizItem.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				loadQuiz();
			}
		});
		menu.add(loadQuizItem);
		
		//
		menu.addSeparator();
		
		// save answer menu option
		JMenuItem saveAnswerItem = new JMenuItem("Save Answer");
		saveAnswerItem.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				saveAnswer();
			}
		});
		menu.add(saveAnswerItem);
		
		//
		menu.addSeparator();
		
		//
		JMenuItem exitItem = new JMenuItem("Exit");
		exitItem.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				exitProcedure();
			}
		});
		menu.add(exitItem);
		
		//
		return menu;
	}
	
	/**
	 * Creates the main panel.
	 */
	private void createMainPanel() {
		
		// initialize and set up the main panel's layout
        myMainPanel = new JPanel();
        myMainPanel.setLayout(new BorderLayout());
        
        // create the text panel and add it to the main panel
        createLessonPanel();
        myMainPanel.add(myLessonPanel, BorderLayout.NORTH);
        
        // create the draw panel and add it to the main panel
		createDrawPanel();
        myMainPanel.add(mySketchPanel, BorderLayout.CENTER);
		
        // create the interaction panel and add it to the main panel
        createInteractionPanel();
        myMainPanel.add(myInteractionPanel, BorderLayout.SOUTH);
    }
	
	/**
	 * Creates the lesson panel.
	 */
	private void createLessonPanel() {
		
		// create lesson panel
		myLessonPanel = new JPanel();
		myLessonPanel.setLayout(new BorderLayout());
		
		// create left panel
		createLessonLeftPanel();
		myLessonPanel.add(myLessonLeftPanel, BorderLayout.WEST);
		
		// create middle panel
		createLessonMiddlePanel();
		myLessonPanel.add(myLessonMiddlePanel, BorderLayout.CENTER);
		
		// create right panel
		createLessonRightPanel();
		myLessonPanel.add(myLessonRightPanel, BorderLayout.EAST);
	}
	
	private void createLessonRightPanel() {
		
		// create the lesson right panel and set its layout
		final JPanel lessonRightPanel = new JPanel();
		lessonRightPanel.setLayout(new BorderLayout());
		
		// add the image panel to the lesson right panel
		JPanel imagePanel = new JPanel();
		JLabel imageLabel = new JLabel();
		setPreviewImage(EMPTY_IMAGE_PATHNAME, imageLabel, PREVIEW_IMAGE_WIDTH_SMALL, PREVIEW_IMAGE_HEIGHT_SMALL);
		imagePanel.add(imageLabel);
		lessonRightPanel.add(imagePanel, BorderLayout.CENTER);
		
		// 
		lessonRightPanel.addMouseListener(new MouseAdapter() {
	        public void mousePressed(MouseEvent e) {
	        	
	        	//
	        	JPanel imagePanel = (JPanel)myLessonRightPanel.getComponent(0);
	    		JLabel imageLabel = (JLabel)imagePanel.getComponent(0);
	    		Icon icon = imageLabel.getIcon();
	    		int width = 0;
	    		int height = 0;
	    		if (Math.abs(icon.getIconWidth() - PREVIEW_IMAGE_WIDTH_SMALL) <  Math.abs(icon.getIconWidth() - PREVIEW_IMAGE_WIDTH_LARGE)) {
	    			width = PREVIEW_IMAGE_WIDTH_LARGE;
	    			height = PREVIEW_IMAGE_HEIGHT_LARGE;
	    		}
	    		else {
	    			width = PREVIEW_IMAGE_WIDTH_SMALL;
	    			height = PREVIEW_IMAGE_HEIGHT_SMALL;
	    		}
	    		Image image = convertIcontoImage(icon);
	    		setPreviewImage(image, imageLabel, width, height);
	        }
	
	        public void mouseReleased(MouseEvent e) {
	        	;
	        }
		});
		
		//
		myLessonRightPanel = lessonRightPanel;
	}
	
	public static void setPreviewImage(String filePath, JLabel imageLabel, int width, int height) {
	
		ImageIcon imageIcon = new ImageIcon(filePath); // load the image to a imageIcon
		setPreviewImage(imageIcon.getImage(), imageLabel, width, height);
	}
	
	public static void setPreviewImage(Image image, JLabel imageLabel, int width, int height) {
		
		Image originalImage = image;
		BufferedImage scaledImage = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
	    Graphics2D g2 = scaledImage.createGraphics();
	    g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
	    g2.drawImage(originalImage, 0, 0, width, height, null);
	    g2.dispose();
	    ImageIcon imageIcon = new ImageIcon(scaledImage);  // transform it back
		imageLabel.setIcon(imageIcon);
	}
	
	public static Image convertIcontoImage(Icon icon) {
		
		if (icon instanceof ImageIcon) {
			return ((ImageIcon)icon).getImage();
		}
		else {
			int w = icon.getIconWidth();
			int h = icon.getIconHeight();
			GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
			GraphicsDevice gd = ge.getDefaultScreenDevice();
			GraphicsConfiguration gc = gd.getDefaultConfiguration();
			BufferedImage image = gc.createCompatibleImage(w, h);
			Graphics2D g = image.createGraphics();
			icon.paintIcon(null, g, 0, 0);
			g.dispose();
			return image;
		}
	}
	
	private void createLessonMiddlePanel() {
		
		//
		JPanel lessonMiddlePanel = new JPanel();
		lessonMiddlePanel.setLayout(new BorderLayout());
		
		// add word wrap to lesson title label using a fixed width method
		JPanel lessonTitlePanel = new JPanel();
		lessonTitlePanel.setLayout(new FlowLayout(FlowLayout.LEFT));
		myLessonTitleLabel = new JLabel(PRE_HTML + "<u>" + getFixedText("Welcome to Maestoso Sketch!", LESSON_TITLE_QUESTION_TEXT_LENGTH) + "</u>" + POST_HTML);
		myLessonTitleLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
		lessonTitlePanel.add(myLessonTitleLabel);
		
		// add word wrap to lesson question label using a fixed width method
		JPanel lessonQuestionPanel = new JPanel();
		lessonQuestionPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
		myLessonQuestionLabel = new JLabel(getFixedText("Load a lesson to begin.", LESSON_TITLE_QUESTION_TEXT_LENGTH));
		myLessonQuestionLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
		lessonQuestionPanel.add(myLessonQuestionLabel);
		
		//
		lessonMiddlePanel.add(lessonTitlePanel, BorderLayout.NORTH);
		lessonMiddlePanel.add(lessonQuestionPanel, BorderLayout.CENTER);
		
		//
		myLessonMiddlePanel = lessonMiddlePanel;
	}
	
	private void createLessonLeftPanel() {
		
		// when creating the lesson left panel, initially set the practice check flag to true
		// this will enable the button initially
		myIsPractice = true;
		
		//
		JPanel lessonLeftPanel = new JPanel();
		lessonLeftPanel.setLayout(new BorderLayout());
		
		//
		JPanel questionNumberPanel = new JPanel();
		myQuestionNumberLabel = new JLabel();
		setQuestionNumberLabel(0);
		questionNumberPanel.add(myQuestionNumberLabel);
		
		//
		JPanel navigationButtonsPanel = new JPanel();
		myPreviousButton = new JButton("<<<");
		myPreviousButton.setEnabled(false);
		if (myIsPractice) {
			myPreviousButton.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					
					mySketchPanel.clear();
					if (myFeedbackGui != null) {
						
						JFrame myFeedbackFrame = myFeedbackGui.getFrame();
						myFeedbackFrame.setVisible(false);
						myFeedbackFrame.dispose();
					}
					
					if (myXmlLesson != null) {
						
						if (0 <= myCurrentQuestionIndex-1) {
							
							--myCurrentQuestionIndex;
							
							if (myCurrentQuestionIndex == 0)
								myPreviousButton.setEnabled(false);
							
							if (!myNextButton.isEnabled())
								myNextButton.setEnabled(true);
							
							XmlQuestion xmlQuestion = myXmlLesson.getQuestions().get(myCurrentQuestionIndex);
							String questionHintText = xmlQuestion.getQuestionText();
							if (myIsPractice)
								questionHintText += "<br><br>" + xmlQuestion.getHintText();
							myLessonQuestionLabel.setText(getFixedText(questionHintText, QUESTION_HINT_TEXT_LENGTH));
							setQuestionNumberLabel(xmlQuestion.getQuestionNumber());
							
							JPanel imagePanel = (JPanel)myLessonRightPanel.getComponent(0);
							JLabel imageLabel = (JLabel)imagePanel.getComponent(0);
							String imageFilePath = xmlQuestion.getImageFile() != null && myIsPractice
									? xmlQuestion.getImageFile().getAbsolutePath()
									: EMPTY_IMAGE_PATHNAME;
							setPreviewImage(imageFilePath, imageLabel, PREVIEW_IMAGE_WIDTH_SMALL, PREVIEW_IMAGE_HEIGHT_SMALL);
						}
					}
				}
			});
		}
		
		myNextButton = new JButton(">>>");
		myNextButton.setEnabled(false);
		myNextButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				//
				if (!myIsPractice)
					myCheckButton.setEnabled(true);
				
				mySketchPanel.clear();
				if (myFeedbackGui != null) {
					
					JFrame myFeedbackFrame = myFeedbackGui.getFrame();
					myFeedbackFrame.setVisible(false);
					myFeedbackFrame.dispose();
				}
				
				if (myXmlLesson != null) {
					
					if (myCurrentQuestionIndex+1 < myXmlLesson.getQuestions().size()) {
						
						++myCurrentQuestionIndex;
						
						if (myCurrentQuestionIndex == myXmlLesson.getQuestions().size()-1)
							myNextButton.setEnabled(false);
						
						if (myIsPractice) {
							if (!myPreviousButton.isEnabled())
								myPreviousButton.setEnabled(true);
						}
						
						XmlQuestion xmlQuestion = myXmlLesson.getQuestions().get(myCurrentQuestionIndex);
						String questionHintText = xmlQuestion.getQuestionText();
						if (myIsPractice)
							questionHintText += "<br><br>" + xmlQuestion.getHintText();
						myLessonQuestionLabel.setText(getFixedText(questionHintText, QUESTION_HINT_TEXT_LENGTH));
						setQuestionNumberLabel(xmlQuestion.getQuestionNumber());
						
						JPanel imagePanel = (JPanel)myLessonRightPanel.getComponent(0);
						JLabel imageLabel = (JLabel)imagePanel.getComponent(0);
						String imageFilePath = xmlQuestion.getImageFile() != null && myIsPractice
								? xmlQuestion.getImageFile().getAbsolutePath()
								: EMPTY_IMAGE_PATHNAME;
						setPreviewImage(imageFilePath, imageLabel, PREVIEW_IMAGE_WIDTH_SMALL, PREVIEW_IMAGE_HEIGHT_SMALL);
					}
				}
			}
		});
		navigationButtonsPanel.add(myPreviousButton);
		navigationButtonsPanel.add(myNextButton);
		
		//
		lessonLeftPanel.add(questionNumberPanel, BorderLayout.NORTH);
		lessonLeftPanel.add(navigationButtonsPanel, BorderLayout.SOUTH);
		
		//
		myLessonLeftPanel = lessonLeftPanel;
	}
	
	public void loadPractice() {
		
		loadLesson(true);
	}
	
	public void loadQuiz() {
		
		loadLesson(false);
	}
	
	private void loadLesson(boolean isPractice) {
		
		//
		myIsPractice = isPractice;
		
		// choose the file
		JFileChooser chooser = new JFileChooser();
		FileNameExtensionFilter filter = new FileNameExtensionFilter("XML Files", "xml");
		chooser.setFileFilter(filter);
		chooser.setCurrentDirectory(new File("./src/edu/tamu/srl/music/learning/"));
		int returnVal = chooser.showOpenDialog(myFrame);
		File xmlFile = null;
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			xmlFile = chooser.getSelectedFile();
		}
		
		// parse xml file
		if (xmlFile == null)
			return;
		XmlLessonParser parser = new XmlLessonParser(xmlFile);
		myXmlLesson = parser.getXmlLesson();
		XmlQuestion firstQuestion = myXmlLesson.getQuestions().get(0);
		
		// load lesson left panel
		List<XmlQuestion> xmlQuestions = myXmlLesson.getQuestions();
		myCurrentQuestionIndex = 0;
		myQuestionNumberLabel.setText("" + firstQuestion.getQuestionNumber());
		setQuestionNumberLabel(firstQuestion.getQuestionNumber());
		myPreviousButton.setEnabled(false);
		if (xmlQuestions.size() > 1)
			myNextButton.setEnabled(true);
		else
			myNextButton.setEnabled(false);
		
		// load lesson middle panel
		myLessonTitleLabel.setText(PRE_HTML + "<u>" + myXmlLesson.getTitle() + "</u>" + POST_HTML);
		String questionHintText = firstQuestion.getQuestionText();
		if (myIsPractice)
			questionHintText += "<br><br>" + firstQuestion.getHintText();
		myLessonQuestionLabel.setText(getFixedText(questionHintText, QUESTION_HINT_TEXT_LENGTH));
		
		// load lesson right panel
		JPanel imagePanel = (JPanel)myLessonRightPanel.getComponent(0);
		JLabel imageLabel = (JLabel)imagePanel.getComponent(0);
		String imageFilePath = firstQuestion.getImageFile() != null && myIsPractice
				? firstQuestion.getImageFile().getAbsolutePath()
				: EMPTY_IMAGE_PATHNAME;
		setPreviewImage(imageFilePath, imageLabel, PREVIEW_IMAGE_WIDTH_SMALL, PREVIEW_IMAGE_HEIGHT_SMALL);

		myResponses = new int[xmlQuestions.size()];
		for (int i = 0; i < myResponses.length; ++i)
			myResponses[i] = 0;
		
		//
		mySketchPanel.clear();
	}
	
	public void saveAnswer() {
		
		// create XmlAnswer objects
		XmlAnswer xmlAnswer = createAnswer(mySketchPanel.getShapes());
		
		// choose the save location
		JFileChooser chooser = new JFileChooser();
		FileNameExtensionFilter filter = new FileNameExtensionFilter("XML Files", "xml");
		chooser.setFileFilter(filter);
		chooser.setCurrentDirectory(new File("./src/edu/tamu/srl/music/learning/"));
		int returnVal = chooser.showSaveDialog(myFrame);
		File saveFile = null;
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			saveFile = chooser.getSelectedFile();
		}
		
		// save contents to file
		if (saveFile != null) {
			String fileName = saveFile.getName();
			if (!fileName.endsWith(".xml"))
				saveFile = new File(chooser.getSelectedFile() + ".xml");
				
			writeAnswerToXml(xmlAnswer, saveFile);
		}
	}
	
	private XmlAnswer createAnswer(List<IShape> originals) {
		
		// case: the list of shapes is empty
		// return an answer with an empty list of staves
		if (originals.size() == 0)
			return new XmlAnswer();
		
		// clone the shapes
		List<IShape> shapes = new ArrayList<IShape>();
		for (IShape original : originals)
			shapes.add(original);
		
		// get all the shapes drawn on the sketch panel
		Iterator<IShape> iterator = null;
		
		// get the staff (if any)
		iterator = shapes.iterator();
		IShape staff = null;
		while (iterator.hasNext()) {
			
			IShape shape = iterator.next();
			if (shape.getShapeName() == ShapeName.STAFF) {
				staff = shape;
				iterator.remove();
			}
		}
		
		// get the clef (if any)
		iterator = shapes.iterator();
		IShape clef = null;
		while (iterator.hasNext()) {
			
			IShape shape = iterator.next();
			if (shape.getShapeGroup() == ShapeGroup.CLEF) {
				clef = shape;
				iterator.remove();
			}
		}
		
		// get the key (if any)
		iterator = shapes.iterator();
		List<IShape> keys = new ArrayList<IShape>();
		while (iterator.hasNext()) {
			
			IShape shape = iterator.next();
			if (shape.getShapeGroup() == ShapeGroup.KEY) {
				
				keys.add(shape);
				iterator.remove();
			}
		}
		Collections.sort(keys, new Comparator<IShape>() {
			public int compare(IShape shape1, IShape shape2) {

				KeyShape key1 = (KeyShape)shape1;
				KeyShape key2 = (KeyShape)shape2;
				int x1 = (int)key1.getBoundingBox().centerX();
				int x2 = (int)key2.getBoundingBox().centerX();
				return x1 - x2;
			}
		});
//		Collections.sort(keys, new Comparator<IShape>() {
//			public int compare(IShape shape1, IShape shape2) {
//
//				KeyShape key1 = (KeyShape)shape1;
//				KeyShape key2 = (KeyShape)shape2;
//				int x1 = (int)key1.getPosition();
//				int x2 = (int)key2.getPosition();
//				return x1 - x2;
//			}
//		});
		
		// get the time (if any)
		iterator = shapes.iterator();
		List<IShape> times = new ArrayList<IShape>();
		while (iterator.hasNext()) {
			
			IShape shape = iterator.next();
			if (shape.getShapeGroup() == ShapeGroup.BEAT) {
				times.add(shape);
				iterator.remove();
			}
		}
		if (times.size() == 2) {
			
			IShape first = times.get(0);
			IShape second = times.get(1);
			if (first.getBoundingBox().centerY() > second.getBoundingBox().centerY()) {
				times.clear();
				times.add(second);
				times.add(first);
			}
		}
		
		// get the notes, rests, and bars
		iterator = shapes.iterator();
		List<IShape> components = new ArrayList<IShape>();
		while (iterator.hasNext()) {
			
			IShape shape = iterator.next();
			ShapeGroup shapeGroup = shape.getShapeGroup();
			if (shapeGroup == ShapeGroup.NOTE || shapeGroup == ShapeGroup.REST || shapeGroup == ShapeGroup.BAR) {
				components.add(shape);
				iterator.remove();
			}
		}
		Collections.sort(components, new Comparator<IShape>() {
			public int compare(IShape shape1, IShape shape2) {

				int x1 = (int)shape1.getBoundingBox().centerX();
				int x2 = (int)shape2.getBoundingBox().centerX();
				return x1 - x2;
			}
		});
		
		XmlAnswer xmlAnswer = null;
		if (staff != null)
			xmlAnswer = createAnswer(staff, clef, keys, times, components);
		else
			xmlAnswer = new XmlAnswer();
		
		return xmlAnswer;
	}
	
	private XmlAnswer createAnswer(IShape staff, IShape clef, List<IShape> keys, List<IShape> times, List<IShape> components) {

		// create xml clef
		XmlClef xmlClef = null;
		if (clef != null) {
		
			XmlClef.Type clefType = null;
			if (clef.getShapeName() == ShapeName.TREBLE_CLEF)
				clefType = XmlClef.Type.TREBLE;
			else if (clef.getShapeName() == ShapeName.BASS_CLEF)
				clefType = XmlClef.Type.BASS;
		
			xmlClef = new XmlClef(clefType);
		}
		
		// create xml key signature
		List<XmlKey> xmlKeys = new ArrayList<XmlKey>();
		for (IShape shape : keys) {
			
			KeyShape key = (KeyShape) shape;
			
			XmlKey.Type keyType = null;
			if (key.getShapeName() == ShapeName.KEY_FLAT)
				keyType = XmlKey.Type.FLAT;
			else if (key.getShapeName() == ShapeName.KEY_SHARP)
				keyType = XmlKey.Type.SHARP;
			
			int keyPos = key.getPosition();
			
			XmlKey xmlKey = new XmlKey(keyType, keyPos);
			xmlKeys.add(xmlKey);
		}
		
		// create xml time signature
		List<XmlTime> xmlTimes = new ArrayList<XmlTime>();
		for (int i = 0; i < times.size(); ++i) {

			IShape time = times.get(i);
			
			XmlTime.Type timeType = null;
			if (i == 0)
				timeType = XmlTime.Type.TOP;
			else if (i == 1)
				timeType = XmlTime.Type.BOTTOM;
			
			int timeValue = TimeShapeClassifier.getValue(time.getShapeName());

			XmlTime xmlTime = new XmlTime(timeType, timeValue);
			xmlTimes.add(xmlTime);
		}
		
		// create xml components
		List<XmlComponent> xmlComponents = new ArrayList<XmlComponent>();
		for (IShape shape : components) {
			
			if (shape.getShapeGroup() == ShapeGroup.NOTE) {
				
				NoteShape note = (NoteShape)shape;
				int position = note.position();
				double duration = note.duration();
				XmlComponent.Accidental accidental = null;
				if (note.hasAccidental()) {
					if (note.accidentalType() == NoteShape.AccidentalType.FLAT)
						accidental = XmlComponent.Accidental.FLAT;
					else if (note.accidentalType() == NoteShape.AccidentalType.SHARP)
						accidental = XmlComponent.Accidental.SHARP;
					else if (note.accidentalType() == NoteShape.AccidentalType.NATURAL)
						accidental = XmlComponent.Accidental.NATURAL;
				}
				else
					accidental = XmlComponent.Accidental.NONE;
				
				XmlComponent component = new XmlComponent(XmlComponent.Type.NOTE);
				component.setPosition(position);
				component.setDuration(duration);
				component.setAccidental(accidental);
				
				xmlComponents.add(component);
			}
			
			else if (shape.getShapeGroup() == ShapeGroup.REST) {
				
				RestShape rest = (RestShape)shape;
				double duration = rest.duration();
				
				XmlComponent component = new XmlComponent(XmlComponent.Type.REST);
				component.setDuration(duration);
				
				xmlComponents.add(component);
			}
			
			else if (shape.getShapeGroup() == ShapeGroup.BAR) {
				
				XmlComponent.Bar bar = null;
				if (shape.getShapeName() == ShapeName.SINGLE_BAR)
					bar = XmlComponent.Bar.SINGLE;
				else if (shape.getShapeName() == ShapeName.DOUBLE_BAR)
					bar = XmlComponent.Bar.DOUBLE;
				else
					bar = XmlComponent.Bar.NONE;
				
				XmlComponent component = new XmlComponent(XmlComponent.Type.BAR);
				component.setBar(bar);
				
				xmlComponents.add(component);
			}
		}
		
		XmlStaff xmlStaff = new XmlStaff(xmlClef, xmlKeys, xmlTimes, xmlComponents);
		List<XmlStaff> staffs = Arrays.asList(xmlStaff);
		XmlAnswer xmlAnswer = new XmlAnswer(staffs);
		
		return xmlAnswer;
	}
	
	public static void writeAnswerToXml(XmlAnswer answer, File saveFile) {
		
		// write file
		XMLOutputFactory factory = XMLOutputFactory.newInstance();
		try {
			XMLStreamWriter writer = factory.createXMLStreamWriter(new FileWriter(saveFile));

			writer.writeStartDocument();
			
			// <answer>
			writer.writeStartElement("answer");
			
			// <staff>
			List<XmlStaff> staffList = answer.getStaffList();
			for (XmlStaff staff : staffList) {
				
				writer.writeStartElement("staff");
				
				// <clef>
				XmlClef clef = staff.getClef();
				if (clef != null) {
					
					writer.writeStartElement("clef");
					
					writer.writeStartElement("type");
					writer.writeCharacters(("" + clef.getType()).toLowerCase());
					writer.writeEndElement();
					
					writer.writeEndElement();
				}
				// </clef>
				
				// <keySignature>
				List<XmlKey> keySignature = staff.getKeySignature();
				if (keySignature.size() > 0) {
					
					writer.writeStartElement("keySignature");
					for (XmlKey key : keySignature) {
						
						writer.writeStartElement("key");
						
						writer.writeStartElement("type");
						writer.writeCharacters(("" + key.getType()).toLowerCase());
						writer.writeEndElement();
						
						writer.writeStartElement("position");
						writer.writeCharacters("" + key.getPosition());
						writer.writeEndElement();
						
						writer.writeEndElement();
					}
					writer.writeEndElement();
				}
				// </key>
				
				// <timeSignature>
				List<XmlTime> timeSignature = staff.getTimeSignature();
				if (timeSignature.size() > 0) {
					
					writer.writeStartElement("timeSignature");
					for (XmlTime time : timeSignature) {
						
						writer.writeStartElement("time");
						
						writer.writeStartElement("type");
						writer.writeCharacters(("" + time.getType()).toLowerCase());
						writer.writeEndElement();
						
						writer.writeStartElement("value");
						writer.writeCharacters("" + time.getValue());
						writer.writeEndElement();
						
						writer.writeEndElement();
					}
					writer.writeEndElement();
				}
				// </timeSignature>
				
				// <components>
				List<XmlComponent> components = staff.getComponents();
				for (XmlComponent component : components) {
					// <component>
					writer.writeStartElement("component");
					
					// <type>
					writer.writeStartElement("type");
					writer.writeCharacters(("" + component.getType()).toLowerCase());
					writer.writeEndElement();
					
					// <position>
					writer.writeStartElement("position");
					writer.writeCharacters("" + component.getPosition());
					writer.writeEndElement();
					
					// <accidental>
					writer.writeStartElement("accidental");
					writer.writeCharacters(("" + component.getAccidental()).toLowerCase());
					writer.writeEndElement();
					
					// <duration>
					writer.writeStartElement("duration");
					writer.writeCharacters("" + component.getDuration());
					writer.writeEndElement();
					
					// <duration>
					writer.writeStartElement("bar");
					writer.writeCharacters(("" + component.getBar()).toLowerCase());
					writer.writeEndElement();
					
					// </component>
					writer.writeEndElement();
				}
				// </components>
				
				writer.writeEndElement();
			}
			
			writer.writeEndElement();
			writer.writeEndDocument();
			
			writer.flush();
			writer.close();
			
		} catch (XMLStreamException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Creates the draw panel.
	 */
	private void createDrawPanel() {
		
		// create the draw panel
		 mySketchPanel = new SketchPanel(this);
	}
	
	/**
	 * Creates the interaction panel.
	 */
	private void createInteractionPanel() {
		
		// initialize the interaction panel and set up its layout
		myInteractionPanel = new JPanel();
		myInteractionPanel.setLayout(new BorderLayout());
		
		// create the colors panel and add it to the interaction panel
		createColorsPanel();
		myInteractionPanel.add(myColorsPanel, BorderLayout.NORTH);
		
		// create the edit panel and add it to the interaction panel
		createEditPanel();
		myInteractionPanel.add(myEditPanel, BorderLayout.SOUTH);
	}
	
	/**
	 * Creates the colors panel.
	 */
	private void createColorsPanel() {
		
		// initialize the colors panel
		myColorsPanel = new JPanel();
		
		// initialize the image icons
		Icon iconB  = new ImageIcon(IMAGES_DIR_PATHNAME + "blue.gif");
		Icon iconM  = new ImageIcon(IMAGES_DIR_PATHNAME + "magenta.gif");
		Icon iconR  = new ImageIcon(IMAGES_DIR_PATHNAME + "red.gif");
		Icon iconBl = new ImageIcon(IMAGES_DIR_PATHNAME + "black.gif");
		Icon iconG  = new ImageIcon(IMAGES_DIR_PATHNAME + "green.gif");
		
		// initialize the buttons
		JButton redButton = new JButton(iconR);
		JButton blackButton = new JButton(iconBl);
		JButton magentaButton = new JButton(iconM);
		JButton blueButton = new JButton(iconB);
		JButton greenButton = new JButton(iconG);
		
		// set the sizes of the buttons
		blackButton.setPreferredSize(new Dimension(16, 16));
		magentaButton.setPreferredSize(new Dimension(16, 16));
		redButton.setPreferredSize(new Dimension(16, 16));
		blueButton.setPreferredSize(new Dimension(16, 16));
		greenButton.setPreferredSize(new Dimension(16,16));
		
		// create the red button and set the icon we created for red
		redButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				mySketchPanel.setPaintRed();
			}

		});
		
		// create the black button and set the icon we created for black
		blackButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				mySketchPanel.setPaintBlack();
			}
		});
		
		// create the magenta button and set the icon we created for magenta
		magentaButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				mySketchPanel.setPaintMagenta();
			}
		});
		
		// create the blue button and set the icon we created for blue
		blueButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				mySketchPanel.setPaintBlue();
			}
		});
		
		// create the green button and set the icon we created for green
		greenButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				mySketchPanel.setPaintGreen();
			}
		});
		
		// add the buttons to the colors panel
		myColorsPanel.add(greenButton);
		myColorsPanel.add(blueButton);
		myColorsPanel.add(magentaButton);
		myColorsPanel.add(blackButton);
		myColorsPanel.add(redButton);
	}
	
	/**
	 * Creates the edit panel.
	 */
	private void createEditPanel() {
		
		// initialize the edit panel
		myEditPanel = new JPanel();
		
		// initialize the buttons
		myClearButton = new JButton("Clear");
		myUndoButton = new JButton("Undo");
		myCheckButton = new JButton("Check");
		
		// create the clear button and add clear functionality
		myClearButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				mySketchPanel.clear();
			}
		});
		
		// create the undo button and add undo functionality
		myUndoButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				mySketchPanel.undo();
			}
		});
		
		// create the check button and add check functionality
		myCheckButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				// close any open feedback windows
				if (myFeedbackGui != null) {
					
					JFrame myFeedbackFrame = myFeedbackGui.getFrame();
					myFeedbackFrame.setVisible(false);
					myFeedbackFrame.dispose();
				}
				
				// do nothing if there is no XML lesson or answer to current lesson question
				if (myXmlLesson == null
						|| myXmlLesson.getQuestions().isEmpty()
						|| myXmlLesson.getQuestions().get(myCurrentQuestionIndex) == null)
					return;
				
				// parse model answer file
				XmlQuestion currentQuestion = myXmlLesson.getQuestions().get(myCurrentQuestionIndex);
				File modelAnswerFile = currentQuestion.getAnswerFile();
				XmlAnswerParser parser = new XmlAnswerParser(modelAnswerFile);
				
				// get submitted and model Answer
				XmlAnswer submittedAnswer = createAnswer(mySketchPanel.getShapes());
				XmlAnswer modelAnswer = parser.getAnswer(); 
				
				// display the feedback window
				myFeedbackGui = new FeedbackGui(submittedAnswer, modelAnswer, myXmlLesson.getQuestions(), myCurrentQuestionIndex, myResponses);
				EventQueue.invokeLater(myFeedbackGui);
				
				if (!myIsPractice)
					myCheckButton.setEnabled(false);
			}
		});
		
		// add the buttons to the panel
		myEditPanel.add(myClearButton);
		myEditPanel.add(myUndoButton);
		myEditPanel.add(myCheckButton);
	}
	
	/**
	 * Gets the text panel.
	 * 
	 * @return
	 */
	public JPanel getTextPanel() {
		
		return myLessonPanel;
	}
	
	public JFrame getFrame() {
		
		return myFrame;
	}
	
	public static int getWidth() {
		
		return myFrame.getSize().width;
	}
	
	public static int getHeight() {
		
		return myFrame.getSize().height;
	}
	
	private void setQuestionNumberLabel(int number) {
		
		myQuestionNumberLabel.setText("#" + number);
		myQuestionNumberLabel.setFont(new Font("sansserif", Font.BOLD, 32));
	}
	
	public static String getFixedText(String text, int length) {
		
		String html1 = "<html><body style='width: ";
        String html2 = "px'>";
        String html3 = "</body></html>";
		return html1 + length + html2 + text + html3;
	}
	
	public static boolean isPractice() {
		
		return myIsPractice;
	}
	
	public static boolean canDisplayOriginal() {
		
		return myCanDisplayOriginal;
	}
	
	
	
	private static JFrame myFrame;
	private JMenuBar myMenuBar;
	private JPanel myMainPanel;
	private JPanel myLessonPanel;
	private JPanel myLessonLeftPanel;
	private JPanel myLessonMiddlePanel;
	private JPanel myLessonRightPanel;
	private SketchPanel mySketchPanel;
	private JPanel myInteractionPanel;
	private JPanel myEditPanel;
	private JPanel myColorsPanel;
	
	private JButton myClearButton;
	private JButton myUndoButton;
	private JButton myCheckButton;
	
	private XmlLesson myXmlLesson;

	private JLabel myQuestionNumberLabel;
	private JButton myPreviousButton;
	private JButton myNextButton;
	private JLabel myLessonTitleLabel;
	private JLabel myLessonQuestionLabel;
	private int myCurrentQuestionIndex;
	private FeedbackGui myFeedbackGui;
	private static boolean myIsPractice; // initially set as true or else previous button will not initialize correctly
	private int[] myResponses;
	private static boolean myCanDisplayOriginal;
	
	public static int DEFAULT_FRAME_WIDTH;
	public static int DEFAULT_FRAME_HEIGHT;
	public static final double FRAME_RATIO = 0.8;
	public static final
		String IMAGES_DIR_PATHNAME = "src/edu/tamu/srl/music/images/";
	public static final
		String EMPTY_IMAGE_PATHNAME = IMAGES_DIR_PATHNAME + "clear.gif";
	public static final
		String APPLICATION_TITLE = "Maestoso Sketch";
	public static final int LESSON_TITLE_QUESTION_TEXT_LENGTH = 600;
	public static final int PREVIEW_IMAGE_WIDTH_SMALL = 330;
	public static final int PREVIEW_IMAGE_HEIGHT_SMALL = 120;
	public static final int PREVIEW_IMAGE_WIDTH_MEDIUM = 440;
	public static final int PREVIEW_IMAGE_HEIGHT_MEDIUM = 160;
	public static final int PREVIEW_IMAGE_WIDTH_LARGE = 550;
	public static final int PREVIEW_IMAGE_HEIGHT_LARGE = 200;
	public static final int QUESTION_HINT_TEXT_LENGTH = 450;
	public static final String PRE_HTML = "<html>";
	public static final String POST_HTML = "</html>";
}