package edu.tamu.srl.music.classifier;

import java.awt.geom.Point2D;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

import edu.tamu.srl.music.xml.XmlPoint;
import edu.tamu.srl.music.xml.XmlSketch;
import edu.tamu.srl.music.xml.XmlSketchParser;
import edu.tamu.srl.music.xml.XmlStroke;

public abstract class AbstractShapeClassifier implements IShapeClassifier {

	public abstract boolean classify(List<IShape> originals);

	public abstract List<IShape> getResult();
	
	protected List<Template> getTemplates(String pathname) {
		
		// get all XML test data files
		File dataDir = new File(pathname);
		File[] files = dataDir.listFiles();
		List<File> dataFiles = new ArrayList<File>();
		for (File file : files) {
			
			if (file.getName().endsWith(".xml")) {
				dataFiles.add(file);
			}
		}

		// convert XML test data files to XmlSketch objects
		XmlSketchParser parser;
		List<XmlSketch> sketches = new ArrayList<XmlSketch>();
		for (File dataFile : dataFiles) {
			
			parser = new XmlSketchParser(dataFile.getAbsolutePath());
			sketches.add(parser.getSketch());
		}
		
		// convert XmlSketch objects to Template objects
		List<Template> templates = new ArrayList<Template>();
		for (XmlSketch sketch : sketches) {
			
			Template template = convertToTemplate(sketch);
			templates.add(template);
		}
		
		return templates;
	}

	private Template convertToTemplate(XmlSketch sketch) {
		
		List<XmlStroke> xmlStrokes = sketch.getStrokes();
		
		String shape = sketch.getShape();
		List<Point2D.Double> points = new ArrayList<Point2D.Double>();
		List<List<Point2D.Double>> strokes = new ArrayList<List<Point2D.Double>>();
		
		for (XmlStroke xmlStroke : xmlStrokes)
			for (XmlPoint xmlPoint : xmlStroke.toPoints())
				points.add(new Point2D.Double(xmlPoint.X(), xmlPoint.Y()));
			strokes.add(points);
			
		return new Template(shape, strokes);
	}
	
	protected List<List<Point2D.Double>> getStrokes(List<IShape> shapes) {
		
		List<List<Point2D.Double>> strokes = new ArrayList<List<Point2D.Double>>();
		
		for (IShape shape : shapes) {
			
			strokes.add(shape.getStrokes().get(0).getPoints());
		}
		
		return strokes;
	}
	
	private boolean isLine(List<IShape> shapes) {
		
		// case: the list of raw strokes is either 0 or 2+
		// a line is only a single stroke
		if (shapes.size() != 1)
			return false;
		
		// get the singleton shape's single stroke's list of points
		List<Point2D.Double> points = shapes.get(0).getStrokes().get(0).getPoints();
		
		
		
		return false;
	}
}
